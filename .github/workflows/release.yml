name: 🚀 Build Windows InsuraTask

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (es: 1.0.0)'
        required: true
        default: '1.0.0'

env:
  NODE_VERSION: '18'
  PRODUCT_NAME: 'InsuraTask'

jobs:
  prepare:
    name: 📋 Prepare Build Info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract version info
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          TAG="v${VERSION}"
        else
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "🏷️ Building version: ${VERSION} (tag: ${TAG})"

  build-windows:
    name: 🔨 Build Windows
    needs: prepare
    runs-on: windows-latest
    
    steps:
    - name: 📂 Checkout repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 🔧 Install dependencies
      run: |
        rm -rf node_modules package-lock.json || true
        npm install
        npm rebuild better-sqlite3
      shell: bash

    - name: 🔍 Type check
      run: npm run check || echo "Type check failed but continuing"

    - name: 🏗️ Build application (Vite + Backend)
      run: npm run build
      env:
        CI: true

    - name: 🖥️ Build Electron app
      run: npm run electron:dist
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ELECTRON_CACHE: .cache/electron
        ELECTRON_BUILDER_CACHE: .cache/electron-builder
        CSC_IDENTITY_AUTO_DISCOVERY: false

    - name: 🔧 Build CommonJS for standalone
      run: |
        mkdir -p dist-pkg/public
        cp -r dist/public/* dist-pkg/public/ || echo "No static files to copy"
        npx esbuild server/standalone-complete.ts \
          --platform=node \
          --target=node18 \
          --bundle \
          --format=cjs \
          --outdir=dist-pkg \
          --external:wouter \
          --external:wouter/* \
          --external:d3-* \
          --external:react \
          --external:react-dom \
          --external:react/* \
          --external:@radix-ui/* \
          --external:lucide-react \
          --external:@tanstack/* \
          --external:recharts \
          --external:recharts/* \
          --packages=external \
          --minify
      shell: bash
      continue-on-error: true

    - name: ⚡ Build standalone binaries
      run: |
        mkdir -p pkg-dist
        npx pkg dist-pkg/standalone-complete.js --targets=node18-win-x64 --output=pkg-dist/insuratask-win32-standalone.exe
      shell: bash
      continue-on-error: true

    - name: 📋 List and filter build files
      run: |
        echo "=== Build output analysis ==="
        
        if [ -d "dist-electron" ]; then
          echo "📦 All Electron files:"
          ls -la dist-electron/
          
          echo ""
          echo "🎯 Main application files:"
          cd dist-electron
          
          # Lista solo i file principali (esclude ausiliari)
          for file in *; do
            if [[ -f "$file" ]]; then
              # Esclude file ausiliari comuni di Electron Builder
              if [[ "$file" != "elevate.exe" && \
                    "$file" != "*.blockmap" && \
                    "$file" != "*.yml" && \
                    "$file" != "*.yaml" && \
                    "$file" != "builder-*.yml" && \
                    "$file" != "latest*.yml" ]]; then
                
                size=$(du -sh "$file" 2>/dev/null | cut -f1)
                echo "  ✅ $file ($size)"
              else
                echo "  ⏭️ Skipping auxiliary file: $file"
              fi
            fi
          done
          cd ..
        fi
        
        if [ -d "pkg-dist" ]; then
          echo ""
          echo "⚡ PKG standalone files:"
          ls -la pkg-dist/
        fi
      shell: bash

    - name: 📝 Smart rename artifacts
      run: |
        cd dist-electron
        
        # Rinomina solo il file principale dell'app
        for file in *; do
          if [[ -f "$file" ]]; then
            # Identifica il file principale (più grande e non ausiliario)
            if [[ "$file" != "elevate.exe" && \
                  "$file" != *.blockmap && \
                  "$file" != *.yml && \
                  "$file" != *.yaml && \
                  "$file" != builder-*.yml && \
                  "$file" != latest*.yml ]]; then
              
              # Ottieni estensione
              if [[ "$file" == *.* ]]; then
                extension="${file##*.}"
              else
                extension=""
              fi
              
              # Nuovo nome
              if [[ -n "$extension" ]]; then
                new_name="${{ env.PRODUCT_NAME }}-${{ needs.prepare.outputs.version }}-win-x64.${extension}"
              else
                new_name="${{ env.PRODUCT_NAME }}-${{ needs.prepare.outputs.version }}-win-x64"
              fi
              
              if [[ "$file" != "$new_name" ]]; then
                mv "$file" "$new_name"
                echo "✅ Renamed main app: $file -> $new_name"
              fi
              
              # Esci dopo aver trovato il file principale
              break
            fi
          fi
        done
        
        cd ..
        
        # Rinomina standalone se esistono
        if [ -d "pkg-dist" ]; then
          cd pkg-dist
          for file in *; do
            if [[ -f "$file" ]]; then
              extension=""
              [[ "$file" == *.* ]] && extension=".${file##*.}"
              new_name="${{ env.PRODUCT_NAME }}-${{ needs.prepare.outputs.version }}-win-x64-standalone${extension}"
              if [[ "$file" != "$new_name" ]]; then
                mv "$file" "$new_name"
                echo "✅ Renamed standalone: $file -> $new_name"
              fi
            fi
          done
          cd ..
        fi
      shell: bash

    - name: 📤 Upload Electron artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-win-x64
        path: dist-electron/${{ env.PRODUCT_NAME }}-${{ needs.prepare.outputs.version }}-win-x64.*
        retention-days: 30
        if-no-files-found: warn

    - name: 📤 Upload PKG artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pkg-win-x64
        path: pkg-dist/${{ env.PRODUCT_NAME }}-${{ needs.prepare.outputs.version }}-win-x64-standalone.*
        retention-days: 30
        if-no-files-found: ignore

  release:
    name: 🎉 Create GitHub Release
    needs: [prepare, build-windows]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: 📂 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-assets

    - name: 📁 Smart organize release files
      run: |
        mkdir -p final-release
        
        echo "=== Organizing release files ==="
        
        # Copia solo i file principali rinominati (esclude ausiliari)
        find release-assets -type f \( \
          -name "${{ env.PRODUCT_NAME }}-${{ needs.prepare.outputs.version }}-win-x64.exe" -o \
          -name "${{ env.PRODUCT_NAME }}-${{ needs.prepare.outputs.version }}-win-x64-standalone.exe" -o \
          -name "${{ env.PRODUCT_NAME }}-${{ needs.prepare.outputs.version }}-win-x64.msi" \
        \) -exec cp {} final-release/ \;
        
        echo "=== Final release files ==="
        if [ "$(ls -A final-release/)" ]; then
          ls -la final-release/
          echo ""
          echo "=== File sizes ==="
          du -sh final-release/*
        else
          echo "⚠️ No files found for release"
          
          echo "=== Debug: All available files ==="
          find release-assets -name "*.exe" -type f
        fi

    - name: 📝 Generate changelog
      id: changelog
      run: |
        echo "## 🚀 InsuraTask v${{ needs.prepare.outputs.version }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 📦 Download" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "Choose the version that suits your needs:" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "| Type | File | Description |" >> CHANGELOG.md
        echo "|------|------|-------------|" >> CHANGELOG.md
        echo "| 🖥️ **Desktop App** | \`${{ env.PRODUCT_NAME }}-${{ needs.prepare.outputs.version }}-win-x64.exe\` | Full Electron app with UI |" >> CHANGELOG.md
        echo "| ⚡ **Portable** | \`${{ env.PRODUCT_NAME }}-${{ needs.prepare.outputs.version }}-win-x64-standalone.exe\` | Single executable |" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 🚀 Quick Start" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "1. **Download** the preferred version" >> CHANGELOG.md
        echo "2. **Run** the executable (no installation required)" >> CHANGELOG.md
        echo "3. **Enjoy** managing your insurance tasks!" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 📋 System Requirements" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- **OS**: Windows 10+ (64-bit)" >> CHANGELOG.md
        echo "- **RAM**: 4GB+ recommended" >> CHANGELOG.md
        echo "- **Disk**: 200MB free space" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### ✨ What's New" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- ✅ Improved build process - no more auxiliary files" >> CHANGELOG.md
        echo "- ✅ Cleaner releases with only main executables" >> CHANGELOG.md
        echo "- ✅ Enhanced Windows compatibility" >> CHANGELOG.md
        echo "- ✅ Better error handling and logging" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 🐛 Report Issues" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "Found a bug? [Create an issue](https://github.com/${{ github.repository }}/issues)" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "---" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "*Built with ❤️ by [Federico Fusarri](https://github.com/FDRFSR)*" >> CHANGELOG.md
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🎉 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare.outputs.tag }}
        name: "🛡️ InsuraTask v${{ needs.prepare.outputs.version }}"
        body: ${{ steps.changelog.outputs.changelog }}
        files: final-release/*
        draft: false
        prerelease: false
        make_latest: true
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: ✅ Release Summary
      run: |
        echo "🎉 Release v${{ needs.prepare.outputs.version }} created successfully!"
        echo ""
        echo "📦 Files included in release:"
        ls -la final-release/ || echo "No files found"
        echo ""
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare.outputs.tag }}"
        echo ""
        echo "📝 Only main application files are included (no auxiliary files like elevate.exe)"